---
# Namespace Composition
# Restaurant Analogy: Recipe for "setting up a dining area" - prepares the space with all necessary elements
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: namespaces.openportal.dev
  labels:
    crossplane.io/xrd: namespaces.openportal.dev
spec:
  compositeTypeRef:
    apiVersion: openportal.dev/v1alpha1
    kind: Namespace
  
  # Use Pipeline mode for composition functions
  mode: Pipeline
  pipeline:
    # Step 1: Create the namespace
    - step: create-namespace
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: v1
            kind: Namespace
            metadata:
              name: {{ .observed.composite.resource.spec.name }}
              labels:
                managed-by: crossplane
                created-by: backstage
                team: {{ .observed.composite.resource.spec.team | default "platform-team" }}
                environment: {{ .observed.composite.resource.spec.environment | default "dev" }}
                {{- range $key, $value := .observed.composite.resource.spec.labels }}
                {{ $key }}: {{ $value | quote }}
                {{- end }}
              annotations:
                crossplane.io/composite-resource-name: {{ .observed.composite.resource.metadata.name }}
                {{- range $key, $value := .observed.composite.resource.spec.annotations }}
                {{ $key }}: {{ $value | quote }}
                {{- end }}
    
    # Step 2: Create ResourceQuota if enabled
    - step: create-resource-quota
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- if .observed.composite.resource.spec.quotas.enabled }}
            ---
            apiVersion: v1
            kind: ResourceQuota
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-quota
              namespace: {{ .observed.composite.resource.spec.name }}
            spec:
              hard:
                limits.cpu: {{ .observed.composite.resource.spec.quotas.limits.cpu | default "10" | quote }}
                limits.memory: {{ .observed.composite.resource.spec.quotas.limits.memory | default "10Gi" | quote }}
                requests.storage: {{ .observed.composite.resource.spec.quotas.limits.storage | default "100Gi" | quote }}
                persistentvolumeclaims: "10"
                services.loadbalancers: "2"
                services.nodeports: "5"
            {{- end }}
    
    # Step 3: Create default NetworkPolicy if enabled
    - step: create-network-policy
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- if .observed.composite.resource.spec.networkPolicies.enabled }}
            ---
            apiVersion: networking.k8s.io/v1
            kind: NetworkPolicy
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-default-deny
              namespace: {{ .observed.composite.resource.spec.name }}
            spec:
              podSelector: {}
              policyTypes:
                - Ingress
                - Egress
              ingress:
                # Allow traffic from the same namespace
                - from:
                    - podSelector: {}
                # Allow traffic from specified namespaces
                {{- range .observed.composite.resource.spec.networkPolicies.allowNamespaces }}
                - from:
                    - namespaceSelector:
                        matchLabels:
                          kubernetes.io/metadata.name: {{ . }}
                {{- end }}
                # Always allow from ingress-nginx
                - from:
                    - namespaceSelector:
                        matchLabels:
                          kubernetes.io/metadata.name: ingress-nginx
              egress:
                # Allow all egress by default
                - {}
            {{- end }}
    
    # Step 4: Create default ServiceAccount
    - step: create-service-account
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: default
              namespace: {{ .observed.composite.resource.spec.name }}
              labels:
                managed-by: crossplane
                team: {{ .observed.composite.resource.spec.team | default "platform-team" }}
    
    # Step 5: Create RoleBinding for namespace admin
    - step: create-rolebinding
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: {{ .observed.composite.resource.spec.name }}-admin
              namespace: {{ .observed.composite.resource.spec.name }}
            subjects:
              - kind: Group
                name: {{ .observed.composite.resource.spec.team | default "platform-team" }}
                apiGroup: rbac.authorization.k8s.io
            roleRef:
              kind: ClusterRole
              name: admin
              apiGroup: rbac.authorization.k8s.io
    
    # Step 6: Mark XR as ready
    - step: auto-ready
      functionRef:
        name: function-auto-ready